// Code generated by mockery v2.23.2. DO NOT EDIT.

package grpcserver

import (
	mock "github.com/stretchr/testify/mock"
	grpc "google.golang.org/grpc"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: _a0
func (_m *MockService) Register(_a0 *grpc.Server) {
	_m.Called(_a0)
}

// MockService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 *grpc.Server
func (_e *MockService_Expecter) Register(_a0 interface{}) *MockService_Register_Call {
	return &MockService_Register_Call{Call: _e.mock.On("Register", _a0)}
}

func (_c *MockService_Register_Call) Run(run func(_a0 *grpc.Server)) *MockService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*grpc.Server))
	})
	return _c
}

func (_c *MockService_Register_Call) Return() *MockService_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockService_Register_Call) RunAndReturn(run func(*grpc.Server)) *MockService_Register_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
